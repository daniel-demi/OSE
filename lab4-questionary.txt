=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a singleline.

=== Q Compare kern/mpentry.S side by side with boot/boot.S. Bearing in
===   mind that kern/mpentry.S is compiled and linked to run above KERNBASE
===   just like everything else in the kernel, what is the purpose of macro
===   MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in
===   boot/boot.S? In other words, what could go wrong if it were
===   omitted in kern/mpentry.S?
===   (free form)
The purpose of the macro is to convert the virtual address to the corresponding physical address 
which is no necessary in boot.S because there we work in real mode (before paging is turned on) so
we already work in the physical address space. If the macro were omitted, we would be accessing the
wrong address since we are in the virtual address space.
=== Q It seems that using the big kernel lock guarantees that only one
===   CPU can run the kernel code at a time. Why do we still need
===   separate kernel stacks for each CPU? Describe a scenario in
===   which using a shared kernel stack will go wrong, even with the
===   protection of the big kernel lock.
===   (free form)
We don't have a mechanism in place to stop multiple processors from pushing onto the kernel stack. 
Therefore, if a processor put stuff on the stack and then another processor changed the stack we could 
encounter a problem.
=== Q Whenever the kernel switches from one environment to another, it
===   must ensure the old environment's registers are saved so they
===   can be restored properly later. Where does this happen?
===   (JOS function name)
trap
=== Q In your implementation of env_run() you should have called
===   lcr3(). Before and after the call to lcr3(), your code makes
===   references (at least it should) to the variable e, the argument
===   to env_run. Upon loading the %cr3 register, the addressing
===   context used by the MMU is instantly changed. But a virtual
===   address (namely e) has meaning relative to a given address 
===   context--the address context specifies the physical address to
===   which the virtual address maps. Why can the pointer e be
===   dereferenced both before and after the addressing switch?
===   (one sentence, free form)
The kernel is shared among all environments and therefore has the same mappings for different page directories.
=== Q In Ex. 9, what happens if the user environment runs out of
===   space on the exception stack?
===   (one setence, free form)
The kernel will destroy the environment.
=== Q In dumpfork.c, the first time you call duppage(), the function
===   allocates a page in one environment (env A) and then maps it in
===   another (env B). At what address is the page mapped in env A, and
===   at what address is it mapped in env B?
===   (ADDR(in env A):ADDR(in env B) (example: 0xAAAAAAAA:0xBBBBBBBB)
0x800000:0x400000
====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
1
=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
kern/spinlock.h
kern/spinlock.c
kern/init.c
kern/env.c
kern/console.c
kern/trap.c
kern/sched.c
kern/syscall.c

=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
Firstly, we broke up the big kernel lock into 4 different locks (sched, ipc, page_alloc, console).
We needed to add those locks by defining them in spinlock.h. Before we changed it, there was only 1 lock, 
now there are multiple that can be used for different things within the kernel. We changed the scheduling locks
that were using the big lock with the schedule lock. We also added more locks around ipc communication in 
syscall.c, console activities in console.c, page allocation in syscall.c and pmap.c, and scheduling in trap.c, 
env.c, init.c, and sched.c. In addition, some of the files mentioned above we added locks that didn't exist previously
so we needed to include spinlock.h to those files. 